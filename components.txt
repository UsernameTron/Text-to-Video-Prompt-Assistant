// src/components/Header.jsx
import React from 'react';
import Link from 'next/link';

const Header = () => {
  return (
    <header className="header">
      <div className="container">
        <h1 className="site-title">Text-to-Video Prompt Optimizer</h1>
        <nav className="main-nav">
          <ul>
            <li>
              <Link href="/">
                <a>Home</a>
              </Link>
            </li>
            <li>
              <Link href="/enhancer">
                <a>Prompt Enhancer</a>
              </Link>
            </li>
            <li>
              <Link href="/examples">
                <a>Examples</a>
              </Link>
            </li>
            <li>
              <Link href="/docs">
                <a>Documentation</a>
              </Link>
            </li>
            <li>
              <Link href="/about">
                <a>About</a>
              </Link>
            </li>
          </ul>
        </nav>
      </div>
    </header>
  );
};

export default Header;

// src/components/Footer.jsx
import React from 'react';

const Footer = () => {
  return (
    <footer className="footer">
      <div className="container">
        <p>
          Text-to-Video Prompt Optimizer - A tool for enhancing text-to-video generation prompts
          with cinematic elements.
        </p>
        <p>
          &copy; {new Date().getFullYear()} - Text-to-Video Prompt Optimizer
        </p>
      </div>
    </footer>
  );
};

export default Footer;

// src/components/PromptInput.jsx
import React, { useState } from 'react';

const PromptInput = ({ onSubmit, initialValue = '', placeholder = 'Enter a basic scene description...' }) => {
  const [prompt, setPrompt] = useState(initialValue);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (prompt.trim()) {
      onSubmit(prompt);
    }
  };

  return (
    <div className="prompt-input">
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label htmlFor="basic-prompt">Basic Prompt</label>
          <textarea
            id="basic-prompt"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder={placeholder}
            rows={3}
            className="form-control"
          />
        </div>
        <button type="submit" className="btn btn-primary">
          Suggest Enhancements
        </button>
      </form>
    </div>
  );
};

export default PromptInput;

// src/components/CategorySelector.jsx
import React from 'react';
import Select from 'react-select';

const CategorySelector = ({ categories, selectedCategories, onChange }) => {
  const options = categories.map(category => ({
    value: category,
    label: category.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())
  }));

  const value = selectedCategories.map(category => ({
    value: category,
    label: category.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())
  }));

  const handleChange = (selected) => {
    onChange(selected ? selected.map(item => item.value) : []);
  };

  return (
    <div className="category-selector">
      <label htmlFor="category-select">Select Categories</label>
      <Select
        id="category-select"
        isMulti
        options={options}
        value={value}
        onChange={handleChange}
        placeholder="Select categories to include..."
        className="category-select"
      />
    </div>
  );
};

export default CategorySelector;

// src/components/ModifierSelector.jsx
import React, { useState, useEffect } from 'react';

const ModifierSelector = ({ suggestions, onModifiersChange }) => {
  const [selectedModifiers, setSelectedModifiers] = useState({});

  useEffect(() => {
    // Initialize with empty selections
    const initialSelections = {};
    Object.keys(suggestions).forEach(category => {
      initialSelections[category] = '';
    });
    setSelectedModifiers(initialSelections);
  }, [suggestions]);

  const handleModifierChange = (category, value) => {
    const updatedModifiers = {
      ...selectedModifiers,
      [category]: value
    };
    setSelectedModifiers(updatedModifiers);
    onModifiersChange(updatedModifiers);
  };

  return (
    <div className="modifier-selector">
      <h3>Select Modifiers</h3>
      {Object.keys(suggestions).length === 0 ? (
        <p>No suggestions available. Please select categories first.</p>
      ) : (
        <div className="modifiers-grid">
          {Object.entries(suggestions).map(([category, options]) => (
            <div key={category} className="modifier-group">
              <label htmlFor={`modifier-${category}`}>
                {category.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
              </label>
              <select
                id={`modifier-${category}`}
                value={selectedModifiers[category] || ''}
                onChange={(e) => handleModifierChange(category, e.target.value)}
                className="form-select"
              >
                <option value="">Select an option</option>
                {options.map((option, index) => (
                  <option key={index} value={option}>
                    {option}
                  </option>
                ))}
              </select>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default ModifierSelector;

// src/components/EnhancedPrompt.jsx
import React, { useState } from 'react';

const EnhancedPrompt = ({ enhancedPrompt }) => {
  const [copied, setCopied] = useState(false);

  const copyToClipboard = () => {
    navigator.clipboard.writeText(enhancedPrompt).then(() => {
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    });
  };

  return (
    <div className="enhanced-prompt">
      <h3>Enhanced Prompt</h3>
      <div className="prompt-display">
        <p>{enhancedPrompt || 'Your enhanced prompt will appear here'}</p>
      </div>
      {enhancedPrompt && (
        <button 
          onClick={copyToClipboard} 
          className="btn btn-secondary"
          disabled={copied}
        >
          {copied ? 'Copied!' : 'Copy to Clipboard'}
        </button>
      )}
    </div>
  );
};

export default EnhancedPrompt;

// src/components/StylePresets.jsx
import React from 'react';
import stylePresets from '../utils/stylePresets';

const StylePresets = ({ onSelectStyle }) => {
  const styles = Object.keys(stylePresets);

  return (
    <div className="style-presets">
      <h3>Style Presets</h3>
      <p>Quick-apply cinematic styles to your prompt</p>
      <div className="style-buttons">
        {styles.map(style => (
          <button
            key={style}
            onClick={() => onSelectStyle(style)}
            className="btn btn-style"
          >
            {style.charAt(0).toUpperCase() + style.slice(1)}
          </button>
        ))}
      </div>
    </div>
  );
};

export default StylePresets;

// src/components/ExampleShowcase.jsx
import React from 'react';

const ExampleShowcase = ({ examples, onUseExample }) => {
  return (
    <div className="example-showcase">
      <h2>Example Prompts</h2>
      <p>Browse these examples to see how basic prompts can be enhanced with cinematic elements</p>
      
      <div className="examples-list">
        {examples.map((example, index) => (
          <div key={index} className="example-card">
            <div className="example-basic">
              <h4>Basic Prompt</h4>
              <p>{example.basic}</p>
            </div>
            <div className="example-enhanced">
              <h4>Enhanced Prompt</h4>
              <p>{example.enhanced}</p>
            </div>
            <button 
              onClick={() => onUseExample(example)}
              className="btn btn-outline"
            >
              Use This Example
            </button>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ExampleShowcase;

// src/components/Documentation.jsx
import React from 'react';

const Documentation = () => {
  return (
    <div className="documentation">
      <h2>Documentation</h2>
      
      <section className="doc-section">
        <h3>Getting Started</h3>
        <p>
          The Text-to-Video Prompt Optimizer enhances basic text prompts with cinematic elements to create more visually compelling and detailed prompts for text-to-video generation models.
        </p>
        <p>
          Follow these steps to optimize your prompts:
        </p>
        <ol>
          <li>Enter your basic text prompt in the input field</li>
          <li>Select categories of cinematic elements you want to include</li>
          <li>Click "Suggest Enhancements" to see suggested modifiers</li>
          <li>Select specific modifiers from each category</li>
          <li>Review your enhanced prompt and copy it for use in text-to-video systems</li>
        </ol>
      </section>
      
      <section className="doc-section">
        <h3>Using Style Presets</h3>
        <p>
          For quick enhancements, use our style presets:
        </p>
        <ul>
          <li><strong>Cinematic:</strong> Professional film look with wide shots and dramatic lighting</li>
          <li><strong>Documentary:</strong> Natural, realistic style with handheld camera work</li>
          <li><strong>Music Video:</strong> Vibrant, dynamic style with creative transitions</li>
          <li><strong>Noir:</strong> Classic black and white style with moody lighting and camera angles</li>
          <li><strong>Nature:</strong> Beautiful landscape cinematography with golden hour lighting</li>
          <li><strong>Sci-Fi:</strong> Futuristic look with cool color grading and high-tech elements</li>
          <li><strong>Horror:</strong> Tense atmosphere with unsettling camera work and dark tones</li>
          <li><strong>Fantasy:</strong> Magical atmosphere with vibrant colors and epic scope</li>
        </ul>
      </section>
      
      <section className="doc-section">
        <h3>Cinematic Elements</h3>
        <p>
          Our optimizer includes a wide range of cinematic elements:
        </p>
        <ul>
          <li><strong>Shot Types:</strong> Close-up, medium shot, wide shot, aerial, etc.</li>
          <li><strong>Camera Movements:</strong> Pan, tilt, tracking, dolly, steadicam, etc.</li>
          <li><strong>Lighting:</strong> High-key, low-key, Rembrandt, silhouette, etc.</li>
          <li><strong>Color Grading:</strong> Technicolor, noir, sepia, vibrant, etc.</li>
          <li><strong>Composition:</strong> Rule of thirds, leading lines, symmetry, etc.</li>
          <li><strong>Mood and Atmosphere:</strong> Various emotional tones and environments</li>
          <li><strong>Technical Specs:</strong> Resolution, frame rate, aspect ratio</li>
        </ul>
      </section>
      
      <section className="doc-section">
        <h3>Tips for Better Results</h3>
        <p>
          To get the best results from text-to-video generation systems:
        </p>
        <ul>
          <li>Start with a clear, descriptive base prompt</li>
          <li>Don't overload with too many modifiers (5-7 is usually ideal)</li>
          <li>Prioritize visual elements that are most important for your scene</li>
          <li>Use complementary modifiers (e.g., "golden hour" pairs well with "warm color grading")</li>
          <li>Test different enhancement combinations to find what works best</li>
        </ul>
      </section>
    </div>
  );
};

export default Documentation;